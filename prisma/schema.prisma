// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NGO {
  id             String   @id @default(cuid())
  nome           String
  descricao      String
  missao         String
  email          String
  telefone       String
  localizacao    String            // store "city, country" text
  latitude       Float?            // optional (if we geocode later)
  longitude      Float?            // optional
  areaAtuacao    AreaAtuacao[]     @relation("NGOAreas")
  colaboracao    Colaboracao[]     @relation("NGOColabs")
  impacto        String            // JSON string of impact texts
  ods            NGOODS[]          // join with ODS via pivot
  eventos        Event[]           // eventos organizados pela NGO
  imagem         String?           // cover image path/url
  logo           String?           // logo path/url
  instagramUrl   String?
  videoUrl       String?
  websiteUrl     String?
  visivel        Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  // Relações com Empresas
  favoritos      Favorito[]
  propostas      Proposta[]
  reunioes       Reuniao[]
}

model ODS {
  id          String   @id @default(cuid())
  numero      Int      @unique // each ODS number must be unique (1..17)
  nome        String
  descricao   String
  icone       String? // path/url
  ngos        NGOODS[]
  eventos     EventODS[]
  empresas    EmpresaODS[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NGOODS {
  id     String @id @default(cuid())
  ngoId  String
  odsId  String
  ngo    NGO    @relation(fields: [ngoId], references: [id], onDelete: Cascade)
  ods    ODS    @relation(fields: [odsId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([ngoId, odsId])
}

model ColaboracaoTipo {
  id    String @id @default(cuid())
  nome  String @unique
  ngos  Colaboracao[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Colaboracao {
  id                 String @id @default(cuid())
  ngoId              String
  colaboracaoTipoId  String
  ngo                NGO              @relation("NGOColabs", fields: [ngoId], references: [id], onDelete: Cascade)
  tipo               ColaboracaoTipo  @relation(fields: [colaboracaoTipoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([ngoId, colaboracaoTipoId])
}

model AreaAtuacaoTipo {
  id      String @id @default(cuid())
  nome    String @unique
  ngos    AreaAtuacao[]
  eventos EventArea[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AreaAtuacao {
  id               String @id @default(cuid())
  ngoId            String
  areaAtuacaoTipoId String
  ngo              NGO               @relation("NGOAreas", fields: [ngoId], references: [id], onDelete: Cascade)
  tipo             AreaAtuacaoTipo   @relation(fields: [areaAtuacaoTipoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([ngoId, areaAtuacaoTipoId])
}

model Event {
  id             String   @id @default(cuid())
  nome           String
  descricao      String
  dataInicio     DateTime
  dataFim        DateTime?
  localizacao    String
  latitude       Float?
  longitude      Float?
  tipo           EventTipo @default(PRESENCIAL) // PRESENCIAL, REMOTO, HIBRIDO
  maxParticipantes Int?
  inscricoesAbertas Boolean @default(true)
  linkInscricao  String?
  linkEvento     String?  // Para eventos remotos
  imagem         String?
  ngoId          String
  ngo            NGO      @relation(fields: [ngoId], references: [id], onDelete: Cascade)
  areas          EventArea[] @relation("EventAreas")
  ods            EventODS[]  @relation("EventODS")
  visivel        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model EventArea {
  id               String @id @default(cuid())
  eventId          String
  areaAtuacaoTipoId String
  event            Event            @relation("EventAreas", fields: [eventId], references: [id], onDelete: Cascade)
  tipo             AreaAtuacaoTipo  @relation(fields: [areaAtuacaoTipoId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  
  @@unique([eventId, areaAtuacaoTipoId])
}

model EventODS {
  id       String @id @default(cuid())
  eventId  String
  odsId    String
  event    Event  @relation("EventODS", fields: [eventId], references: [id], onDelete: Cascade)
  ods      ODS    @relation(fields: [odsId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([eventId, odsId])
}

enum EventTipo {
  PRESENCIAL
  REMOTO
  HIBRIDO
}

// ========================================
// EMPRESAS E COLABORAÇÃO
// ========================================

enum StatusIniciativa {
  RASCUNHO
  ATIVA
  PAUSADA
  CONCLUIDA
  CANCELADA
}

enum StatusProposta {
  PENDENTE
  EM_ANALISE
  APROVADA
  REJEITADA
  ARQUIVADA
}

enum StatusReuniao {
  AGENDADA
  CONFIRMADA
  REALIZADA
  CANCELADA
  REMARCADA
}

enum StatusInscricao {
  PENDENTE
  CONFIRMADA
  CANCELADA
  CONCLUIDA
}

enum TipoApoio {
  TEMPO_VOLUNTARIADO
  CONHECIMENTO_CAPACITACAO
  RECURSOS_SERVICOS
  PRODUTOS_BENS
}

enum FormatoRelatorio {
  PDF
  EXCEL
  CSV
  JSON
}

enum TipoReuniao {
  PRESENCIAL
  ONLINE
  HIBRIDA
}

model Empresa {
  id                String   @id @default(cuid())
  nome              String
  missao            String
  descricao         String?
  setor             String?
  numColaboradores  Int?     @map("num_colaboradores")
  logo              String?
  website           String?
  email             String
  telefone          String?
  localizacao       String?
  latitude          Float?
  longitude         Float?
  visivel           Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  tiposApoio        EmpresaTipoApoio[]
  ods               EmpresaODS[]
  causas            EmpresaCausa[]
  estatisticas      EstatisticaImpactoEmpresa[]
  colaboradores     ColaboradorEmpresa[]
  iniciativas       Iniciativa[]
  propostas         Proposta[]
  reunioes          Reuniao[]
  favoritos         Favorito[]
  exportacoes       ExportacaoRelatorio[]
  
  @@map("empresas")
}

model TipoApoioEmpresa {
  id          String     @id @default(cuid())
  nome        String     @unique
  descricao   String?
  tipo        TipoApoio
  createdAt   DateTime   @default(now()) @map("created_at")
  
  empresas    EmpresaTipoApoio[]
  
  @@map("tipos_apoio_empresa")
}

model EmpresaTipoApoio {
  id            String   @id @default(cuid())
  empresaId     String   @map("empresa_id")
  tipoApoioId   String   @map("tipo_apoio_id")
  createdAt     DateTime @default(now()) @map("created_at")
  
  empresa       Empresa          @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  tipoApoio     TipoApoioEmpresa @relation(fields: [tipoApoioId], references: [id], onDelete: Cascade)
  
  @@unique([empresaId, tipoApoioId])
  @@map("empresa_tipos_apoio")
}

model EmpresaODS {
  id          String   @id @default(cuid())
  empresaId   String   @map("empresa_id")
  odsId       String   @map("ods_id")
  createdAt   DateTime @default(now()) @map("created_at")
  
  empresa     Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ods         ODS      @relation(fields: [odsId], references: [id], onDelete: Cascade)
  
  @@unique([empresaId, odsId])
  @@map("empresa_ods")
}

model Causa {
  id          String   @id @default(cuid())
  nome        String   @unique
  descricao   String?
  icone       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  empresas    EmpresaCausa[]
  iniciativas Iniciativa[]
  
  @@map("causas")
}

model EmpresaCausa {
  id          String   @id @default(cuid())
  empresaId   String   @map("empresa_id")
  causaId     String   @map("causa_id")
  createdAt   DateTime @default(now()) @map("created_at")
  
  empresa     Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  causa       Causa    @relation(fields: [causaId], references: [id], onDelete: Cascade)
  
  @@unique([empresaId, causaId])
  @@map("empresa_causas")
}

model EstatisticaImpactoEmpresa {
  id                String   @id @default(cuid())
  empresaId         String   @map("empresa_id")
  periodoAno        Int      @map("periodo_ano")
  periodoMes        Int      @map("periodo_mes")
  horasVoluntariado Float    @default(0) @map("horas_voluntariado")
  numProjetos       Int      @default(0) @map("num_projetos")
  numVoluntarios    Int      @default(0) @map("num_voluntarios")
  valorDoacoes      Float    @default(0) @map("valor_doacoes")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  empresa           Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  
  @@unique([empresaId, periodoAno, periodoMes])
  @@map("estatisticas_impacto_empresa")
}

model ColaboradorEmpresa {
  id            String   @id @default(cuid())
  empresaId     String   @map("empresa_id")
  nome          String
  email         String
  departamento  String?
  cargo         String?
  avatar        String?
  ativo         Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  empresa       Empresa             @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  inscricoes    InscricaoIniciativa[]
  exportacoes   ExportacaoRelatorio[]
  
  @@unique([empresaId, email])
  @@map("colaboradores")
}

model Iniciativa {
  id                String             @id @default(cuid())
  empresaId         String             @map("empresa_id")
  causaId           String?            @map("causa_id")
  titulo            String
  descricao         String
  dataInicio        DateTime           @map("data_inicio")
  dataFim           DateTime?          @map("data_fim")
  tipoApoio         TipoApoio          @map("tipo_apoio")
  vagas             Int?
  vagasPreenchidas  Int                @default(0) @map("vagas_preenchidas")
  status            StatusIniciativa   @default(RASCUNHO)
  localizacao       String?
  latitude          Float?
  longitude         Float?
  imagem            String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  
  empresa           Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  causa             Causa?             @relation(fields: [causaId], references: [id])
  inscricoes        InscricaoIniciativa[]
  propostas         Proposta[]
  
  @@map("iniciativas")
}

model InscricaoIniciativa {
  id                String           @id @default(cuid())
  iniciativaId      String           @map("iniciativa_id")
  colaboradorId     String           @map("colaborador_id")
  status            StatusInscricao  @default(PENDENTE)
  horasContribuidas Float            @default(0) @map("horas_contribuidas")
  feedback          String?
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  
  iniciativa        Iniciativa          @relation(fields: [iniciativaId], references: [id], onDelete: Cascade)
  colaborador       ColaboradorEmpresa  @relation(fields: [colaboradorId], references: [id], onDelete: Cascade)
  
  @@unique([iniciativaId, colaboradorId])
  @@map("inscricoes_iniciativa")
}

model Favorito {
  id          String   @id @default(cuid())
  ongId       String   @map("ong_id")
  empresaId   String   @map("empresa_id")
  createdAt   DateTime @default(now()) @map("created_at")
  
  ong         NGO      @relation(fields: [ongId], references: [id], onDelete: Cascade)
  empresa     Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  
  @@unique([ongId, empresaId])
  @@map("favoritos")
}

model Proposta {
  id               String          @id @default(cuid())
  ongId            String          @map("ong_id")
  empresaId        String          @map("empresa_id")
  iniciativaId     String?         @map("iniciativa_id")
  titulo           String
  descricao        String
  odsRelacionados  String[]        @map("ods_relacionados")
  anexosMeta       Json?           @map("anexos_meta")
  status           StatusProposta  @default(PENDENTE)
  respostaEmpresa  String?         @map("resposta_empresa")
  respondidoEm     DateTime?       @map("respondido_em")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  
  ong              NGO             @relation(fields: [ongId], references: [id], onDelete: Cascade)
  empresa          Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  iniciativa       Iniciativa?     @relation(fields: [iniciativaId], references: [id], onDelete: SetNull)
  reunioes         Reuniao[]
  
  @@map("propostas")
}

model Reuniao {
  id                String         @id @default(cuid())
  empresaId         String         @map("empresa_id")
  ongId             String         @map("ong_id")
  propostaId        String?        @map("proposta_id")
  titulo            String
  descricao         String?
  startAt           DateTime       @map("start_at")
  endAt             DateTime       @map("end_at")
  status            StatusReuniao  @default(AGENDADA)
  localOuLink       String?        @map("local_ou_link")
  tipoReuniao       TipoReuniao?   @map("tipo_reuniao")
  criadoPorEmpresa  Boolean        @default(true) @map("criado_por_empresa")
  notas             String?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  
  empresa           Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ong               NGO            @relation(fields: [ongId], references: [id], onDelete: Cascade)
  proposta          Proposta?      @relation(fields: [propostaId], references: [id], onDelete: SetNull)
  
  @@map("reunioes")
}

model ExportacaoRelatorio {
  id              String           @id @default(cuid())
  empresaId       String           @map("empresa_id")
  colaboradorId   String?          @map("colaborador_id")
  titulo          String
  filtrosJson     Json?            @map("filtros_json")
  formato         FormatoRelatorio
  caminhoFicheiro String?          @map("caminho_ficheiro")
  tamanhoBytes    BigInt?          @map("tamanho_bytes")
  createdAt       DateTime         @default(now()) @map("created_at")
  
  empresa         Empresa             @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  colaborador     ColaboradorEmpresa? @relation(fields: [colaboradorId], references: [id], onDelete: SetNull)
  
  @@map("exportacoes_relatorios")
}

